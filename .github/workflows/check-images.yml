name: "检查 Markdown 图片引用"
on:
  push:
    paths:
      - '.gitbook/assets/**'
  workflow_dispatch:

jobs:
  scan-images:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      - name: Scan images and create issue
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs')
            const path = require('path')
            // 重命名 require，避免与注入的 glob 冲突
            const { sync: globSync } = require('glob')

            // 获取所有 Markdown 和 assets 中的文件
            const mdFiles = globSync('**/*.md')
            const assetFiles = globSync('.gitbook/assets/**/*.*')

            const referenced = new Set()
            const imgRegex = /!\[[^\]]*?\]\((\.gitbook\/assets\/[^\)]+)\)/g
            for (const file of mdFiles) {
              const content = fs.readFileSync(file, 'utf8')
              let m
              while ((m = imgRegex.exec(content)) !== null) {
                referenced.add(m[1])
              }
            }

            const missing = [...referenced].filter(p => !fs.existsSync(p))
            const unused  = assetFiles.filter(p => !referenced.has(p.replace(/\\/g,'/')))

            if (missing.length || unused.length) {
              let body = []
              if (missing.length) {
                body.push('### ❌ 引用但不存在的图片：')
                missing.forEach(p => body.push(`- \`${p}\``))
              }
              if (unused.length) {
                body.push('### 🆕 未被引用的图片：')
                unused.forEach(p => body.push(`- \`${p}\``))
              }
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo:  context.repo.repo,
                title: `🖼️ 图片引用检查：${missing.length} 缺失，${unused.length} 未使用`,
                body:  body.join('\n'),
              })
            } else {
              console.log('All images are consistent.')
            }
