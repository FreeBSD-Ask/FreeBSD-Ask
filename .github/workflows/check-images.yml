name: "检查 Markdown 图片引用"
on:
  push:
    paths:
      - '.gitbook/assets/**'
  workflow_dispatch:

jobs:
  check-images:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Find and check images
        id: image-check
        run: |
          #!/bin/bash
          set -euo pipefail

          # 配置参数
          REPO_ROOT="$PWD"
          ASSETS_DIR=".gitbook/assets"
          REPORT_FILE="image-report.md"

          # 初始化临时文件
          used_images=$(mktemp)
          existing_images=$(mktemp)

          # 查找所有 Markdown 文件并处理图片引用
          find "$REPO_ROOT" -type f -iname "*.md" | while read md_file; do
            # 提取所有图片引用
            grep -Po '!\[.*?\]\(\s*\K[^\)\s]*(?=\s*(?:["'\''].*?["'\''])?\))' "$md_file" | while read img_path; do
              # 跳过网络图片
              [[ "$img_path" =~ ^(http://|https://|//) ]] && continue
              
              # 标准化路径
              if [[ "$img_path" =~ ^/ ]]; then
                # 绝对路径
                abs_path="${REPO_ROOT}${img_path}"
              else
                # 相对路径
                md_dir=$(dirname "$md_file")
                abs_path=$(realpath -m "$md_dir/$img_path")
              fi

              # 转换为仓库相对路径
              rel_path=$(realpath --relative-to="$REPO_ROOT" "$abs_path" 2>/dev/null || true)
              [[ -n "$rel_path" ]] && echo "$rel_path" >> "$used_images"
            done
          done

          # 收集存在的图片文件 (仅限 .gitbook/assets)
          find "$ASSETS_DIR" -type f \( -iname "*.png" -o -iname "*.jpg" -o -iname "*.jpeg" -o -iname "*.gif" -o -iname "*.svg" \) | 
            xargs -I{} realpath --relative-to="$REPO_ROOT" "{}" >> "$existing_images"

          # 排序并去重
          sort -u "$used_images" -o "$used_images"
          sort -u "$existing_images" -o "$existing_images"

          # 计算差异
          missing_images=$(comm -23 "$used_images" "$existing_images")
          unused_images=$(comm -13 "$used_images" "$existing_images")

          # 生成报告
          report=""
          if [[ -n "$missing_images" ]]; then
            report+="## ❌ Missing Images\n\n"
            report+=$(echo "$missing_images" | sed 's/^/- ` /;s/$/`/')
            report+="\n\n"
          fi

          if [[ -n "$unused_images" ]]; then
            report+="## ⚠️ Unused Images\n\n"
            report+=$(echo "$unused_images" | sed 's/^/- ` /;s/$/`/')
            report+="\n\n"
          fi

          if [[ -n "$report" ]]; then
            echo -e "# Image Reference Check Report\n\n$report" > "$REPORT_FILE"
          else
            echo "✅ All images are properly referenced!" > "$REPORT_FILE"
          fi

          # 清理临时文件
          rm "$used_images" "$existing_images"

          # 设置输出标记
          if grep -qE '❌|⚠️' "$REPORT_FILE"; then
            echo "report_exists=1" >> $GITHUB_OUTPUT
          else
            echo "report_exists=0" >> $GITHUB_OUTPUT
          fi

      - name: Create Issue
        if: steps.image-check.outputs.report_exists == '1'
        uses: peter-evans/create-issue-from-file@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          title: "Image Reference Report: Missing or Unused Images"
          content-filepath: ./image-report.md
          labels: report, automation
